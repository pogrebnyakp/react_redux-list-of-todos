{"version":3,"sources":["store/types.ts","store/store.ts","components/TodoList/TodoList.tsx","store/selectors.ts","store/actions.ts","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["ActionsTypes","TodoStatus","initialState","todos","selectedUserId","store","createStore","state","action","type","AddTodos","payload","SetSelectedUserId","getTodoSelector","getUserIdSelector","selectUserId","ACTIONS","TodoList","useState","query","setQuery","selectValue","setSelectValue","useSelector","dispatch","useDispatch","visibleTodos","useMemo","filteredTodos","filter","todo","title","toLowerCase","includes","Active","completed","Completed","All","className","placeholder","value","onChange","event","target","Object","keys","map","key","classnames","TodoList__item","readOnly","checked","userId","onClick","id","getData","endpoint","a","fetch","response","ok","Error","status","json","CurrentUser","user","setUser","errorText","setErrorText","useEffect","then","userFromServer","catch","error","toString","name","email","phone","App","addTodos","getDataFromServer","dataFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2c3571f7.chunk.js","sourcesContent":["/// <reference types=\"react-scripts\" />\nimport { Action as BaseAction } from 'redux';\n\nexport interface Todo {\n  id: number,\n  userId: number,\n  title: string,\n  completed: boolean,\n}\n\nexport interface User {\n  id: number,\n  name: string,\n  email: string,\n  phone: string,\n}\n\nexport type State = {\n  todos: Todo[],\n  selectedUserId: number,\n};\n\ninterface Action<T, P> extends BaseAction<T> {\n  payload: P\n}\n\nexport enum ActionsTypes {\n  AddTodos = 'addTodos',\n  AddTodo = 'addTodo',\n  SetSelectedUserId = 'selectedUserId',\n  FilterTodos = 'filterTodos',\n  SearchTitleTodos = 'searchTitleTodos',\n}\n\nexport type AddTodosAction = Action<ActionsTypes.AddTodos, Todo[]>;\nexport type AddTodoAction = BaseAction<ActionsTypes.AddTodo>;\nexport type SetSelectedUserIdAction\n  = Action<ActionsTypes.SetSelectedUserId, number>;\n\nexport type Actions = AddTodosAction\n| AddTodoAction\n| SetSelectedUserIdAction;\n","import { createStore, Reducer, Store } from 'redux';\nimport { State, Actions, ActionsTypes } from './types';\n\nconst initialState: State = {\n  todos: [],\n  selectedUserId: 0,\n};\n\nconst reducer: Reducer<State, Actions>\n= (state = initialState, action): State => {\n  switch (action.type) {\n    case ActionsTypes.AddTodos:\n      return {\n        ...state,\n        todos: [...state.todos, ...action.payload],\n      };\n\n    case ActionsTypes.SetSelectedUserId:\n      return {\n        ...state,\n        selectedUserId: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store: Store<State, Actions> = createStore(reducer);\n","import React, { useMemo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './TodoList.scss';\nimport classnames from 'classnames';\nimport { getTodoSelector, getUserIdSelector } from '../../store/selectors';\nimport { ACTIONS } from '../../store/actions';\n\nenum TodoStatus {\n  All = 'All',\n  Active = 'Active',\n  Completed = 'Completed',\n}\n\nexport const TodoList: React.FC = () => {\n  const { selectUserId } = ACTIONS;\n  const [query, setQuery] = useState('');\n  const [selectValue, setSelectValue] = useState('');\n\n  const todos = useSelector(getTodoSelector);\n  const selectedUserId = useSelector(getUserIdSelector);\n  const dispatch = useDispatch();\n\n  const visibleTodos = useMemo(() => {\n    const filteredTodos = todos.filter((todo: { title: string; }) => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n    ));\n\n    switch (selectValue) {\n      case TodoStatus.Active:\n        return filteredTodos.filter(todo => !todo.completed);\n      case TodoStatus.Completed:\n        return filteredTodos.filter(todo => todo.completed);\n\n      case TodoStatus.All:\n      default:\n        return filteredTodos;\n    }\n  }, [todos, query, selectValue]);\n\n  const handleChangeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n  };\n\n  const handleChangeSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectValue(event.target.value);\n  };\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <input\n        type=\"text\"\n        className=\"TodoList__input\"\n        placeholder=\"Type search word\"\n        value={query}\n        onChange={handleChangeInput}\n      />\n\n      <select\n        className=\"TodoList__select\"\n        onChange={handleChangeSelect}\n        value={selectValue}\n      >\n        {Object.keys(TodoStatus).map(key => (\n\n          <option\n            value={key}\n            key={key}\n          >\n            {key}\n          </option>\n\n        ))}\n      </select>\n      <div className=\"TodoList__list-container\">\n        <ul className=\"TodoList__list\" data-cy=\"listOfTodos\">\n          {visibleTodos.map(todo => (\n            <li\n              className={classnames({\n                TodoList__item: true,\n                'TodoList__item--unchecked': !todo.completed,\n                'TodoList__item--checked': todo.completed,\n              })}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>{todo.title}</p>\n              </label>\n\n              <button\n                className={classnames(\n                  'TodoList__user-button',\n                  {\n                    'TodoList__user-button--selected':\n                    todo.userId === selectedUserId,\n                  },\n                  'button',\n                )}\n                data-cy=\"filterByTitle\"\n                type=\"button\"\n                onClick={() => dispatch(selectUserId(todo.userId))}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { State, Todo } from './types';\n\nexport const getTodoSelector = (state: State): Todo[] => state.todos;\n\nexport const getUserIdSelector = (state: State): number => state.selectedUserId;\n","import {\n  AddTodosAction, ActionsTypes,\n  Todo, SetSelectedUserIdAction,\n} from './types';\n\nexport const addTodos = (payload: Todo[]): AddTodosAction => ({\n  type: ActionsTypes.AddTodos,\n  payload,\n});\n\nexport const selectUserId\n  = (payload: number): SetSelectedUserIdAction => ({\n    type: ActionsTypes.SetSelectedUserId,\n    payload,\n  });\n\nexport const ACTIONS = {\n  addTodos,\n  selectUserId,\n};\n","import { Todo, User } from '../store/types';\n\nconst API_URL = 'https://mate.academy/students-api/123';\n\nexport const getData = async (endpoint: string) => {\n  const response = await fetch(`${API_URL}/${endpoint}`);\n\n  if (!response.ok) {\n    throw new Error(`Status of error: ${response.status}`);\n  }\n\n  return response.json();\n};\n\nexport const getTodos = (): Promise<Todo[]> => getData('todos');\n\nexport const getUser = (userId: number): Promise<User> => getData(`users/${userId}`);\n","import classnames from 'classnames';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUser } from '../../api/api';\nimport { selectUserId } from '../../store/actions';\nimport { getUserIdSelector } from '../../store/selectors';\nimport { User } from '../../store/types';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: React.FC\n= () => {\n  const [user, setUser] = useState<User | null>(null);\n  const [errorText, setErrorText] = useState('');\n\n  const selectedUserId = useSelector(getUserIdSelector);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    getUser(selectedUserId)\n      .then(userFromServer => setUser(userFromServer))\n      .catch((error) => setErrorText(error.toString()));\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"CurrentUser\">\n      {user ? (\n        <>\n          <h2 className=\"CurrentUser__title\">\n            <span data-cy=\"userButton\">\n              Selected user:\n              {user.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\" data-cy=\"userName\">\n            {user.name}\n          </h3>\n          <p className=\"CurrentUser__email\">\n            {user.email}\n          </p>\n          <p className=\"CurrentUser__phone\">\n            {user.phone}\n          </p>\n          <button\n            className={classnames(\n              'TodoList__user-button',\n              {\n                'TodoList__user-button--selected':\n                  user.id === selectedUserId,\n              },\n              'button',\n            )}\n            type=\"button\"\n            onClick={() => dispatch(selectUserId(0))}\n          >\n            Clear\n          </button>\n        </>\n      ) : (\n        <p>{errorText}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\nimport { ACTIONS } from './store/actions';\nimport { getTodoSelector, getUserIdSelector } from './store/selectors';\n\nconst App: React.FC = () => {\n  const { addTodos } = ACTIONS;\n  const [errorText, setErrorText] = useState('');\n\n  const todos = useSelector(getTodoSelector);\n  const selectedUserId = useSelector(getUserIdSelector);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const getDataFromServer = async () => {\n      try {\n        const dataFromServer = await getTodos();\n\n        dispatch(addTodos(dataFromServer));\n      } catch (error) {\n        setErrorText('Can\\'t download data from server!');\n      }\n    };\n\n    getDataFromServer();\n  }, []);\n\n  if (errorText) {\n    return (\n      <div>\n        {errorText}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        {todos ? (\n          <TodoList />\n        ) : (\n          <p>loading...</p>\n        )}\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport { store } from './store/store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}